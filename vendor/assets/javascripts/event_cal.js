// Generated by CoffeeScript 1.3.1
(function() {
  var $, CalendarApplication, CalendarDate, CalendarDatesController, CalendarEvent, CalendarEventsController, Controller, Events, Log, Model, Module, Spine, createObject, isArray, isBlank, makeArray, moduleKeywords,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Events = {
    bind: function(ev, callback) {
      var calls, evs, name, _i, _len;
      evs = ev.split(' ');
      calls = this.hasOwnProperty('_callbacks') && this._callbacks || (this._callbacks = {});
      for (_i = 0, _len = evs.length; _i < _len; _i++) {
        name = evs[_i];
        calls[name] || (calls[name] = []);
        calls[name].push(callback);
      }
      return this;
    },
    one: function(ev, callback) {
      return this.bind(ev, function() {
        this.unbind(ev, arguments.callee);
        return callback.apply(this, arguments);
      });
    },
    trigger: function() {
      var args, callback, ev, list, _i, _len, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      ev = args.shift();
      list = this.hasOwnProperty('_callbacks') && ((_ref = this._callbacks) != null ? _ref[ev] : void 0);
      if (!list) {
        return;
      }
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        callback = list[_i];
        if (callback.apply(this, args) === false) {
          break;
        }
      }
      return true;
    },
    unbind: function(ev, callback) {
      var cb, i, list, _i, _len, _ref;
      if (!ev) {
        this._callbacks = {};
        return this;
      }
      list = (_ref = this._callbacks) != null ? _ref[ev] : void 0;
      if (!list) {
        return this;
      }
      if (!callback) {
        delete this._callbacks[ev];
        return this;
      }
      for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
        cb = list[i];
        if (!(cb === callback)) {
          continue;
        }
        list = list.slice();
        list.splice(i, 1);
        this._callbacks[ev] = list;
        break;
      }
      return this;
    }
  };

  Log = {
    trace: true,
    logPrefix: '(App)',
    log: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!this.trace) {
        return;
      }
      if (this.logPrefix) {
        args.unshift(this.logPrefix);
      }
      if (typeof console !== "undefined" && console !== null) {
        if (typeof console.log === "function") {
          console.log.apply(console, args);
        }
      }
      return this;
    }
  };

  moduleKeywords = ['included', 'extended'];

  Module = (function() {

    Module.name = 'Module';

    Module.include = function(obj) {
      var key, value, _ref;
      if (!obj) {
        throw new Error('include(obj) requires obj');
      }
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((_ref = obj.included) != null) {
        _ref.apply(this);
      }
      return this;
    };

    Module.extend = function(obj) {
      var key, value, _ref;
      if (!obj) {
        throw new Error('extend(obj) requires obj');
      }
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if ((_ref = obj.extended) != null) {
        _ref.apply(this);
      }
      return this;
    };

    Module.proxy = function(func) {
      var _this = this;
      return function() {
        return func.apply(_this, arguments);
      };
    };

    Module.prototype.proxy = function(func) {
      var _this = this;
      return function() {
        return func.apply(_this, arguments);
      };
    };

    function Module() {
      if (typeof this.init === "function") {
        this.init.apply(this, arguments);
      }
    }

    return Module;

  })();

  Model = (function(_super) {

    __extends(Model, _super);

    Model.name = 'Model';

    Model.extend(Events);

    Model.records = {};

    Model.crecords = {};

    Model.attributes = [];

    Model.configure = function() {
      var attributes, name;
      name = arguments[0], attributes = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.className = name;
      this.records = {};
      this.crecords = {};
      if (attributes.length) {
        this.attributes = attributes;
      }
      this.attributes && (this.attributes = makeArray(this.attributes));
      this.attributes || (this.attributes = []);
      this.unbind();
      return this;
    };

    Model.toString = function() {
      return "" + this.className + "(" + (this.attributes.join(", ")) + ")";
    };

    Model.find = function(id) {
      var record;
      record = this.records[id];
      if (!record && ("" + id).match(/c-\d+/)) {
        return this.findCID(id);
      }
      if (!record) {
        throw new Error('Unknown record');
      }
      return record.clone();
    };

    Model.findCID = function(cid) {
      var record;
      record = this.crecords[cid];
      if (!record) {
        throw new Error('Unknown record');
      }
      return record.clone();
    };

    Model.exists = function(id) {
      try {
        return this.find(id);
      } catch (e) {
        return false;
      }
    };

    Model.refresh = function(values, options) {
      var record, records, _i, _len;
      if (options == null) {
        options = {};
      }
      if (options.clear) {
        this.records = {};
        this.crecords = {};
      }
      records = this.fromJSON(values);
      if (!isArray(records)) {
        records = [records];
      }
      for (_i = 0, _len = records.length; _i < _len; _i++) {
        record = records[_i];
        record.id || (record.id = record.cid);
        this.records[record.id] = record;
        this.crecords[record.cid] = record;
      }
      this.trigger('refresh', this.cloneArray(records));
      return this;
    };

    Model.select = function(callback) {
      var id, record, result;
      result = (function() {
        var _ref, _results;
        _ref = this.records;
        _results = [];
        for (id in _ref) {
          record = _ref[id];
          if (callback(record)) {
            _results.push(record);
          }
        }
        return _results;
      }).call(this);
      return this.cloneArray(result);
    };

    Model.findByAttribute = function(name, value) {
      var id, record, _ref;
      _ref = this.records;
      for (id in _ref) {
        record = _ref[id];
        if (record[name] === value) {
          return record.clone();
        }
      }
      return null;
    };

    Model.findAllByAttribute = function(name, value) {
      return this.select(function(item) {
        return item[name] === value;
      });
    };

    Model.each = function(callback) {
      var key, value, _ref, _results;
      _ref = this.records;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(callback(value.clone()));
      }
      return _results;
    };

    Model.all = function() {
      return this.cloneArray(this.recordsValues());
    };

    Model.first = function() {
      var record;
      record = this.recordsValues()[0];
      return record != null ? record.clone() : void 0;
    };

    Model.last = function() {
      var record, values;
      values = this.recordsValues();
      record = values[values.length - 1];
      return record != null ? record.clone() : void 0;
    };

    Model.count = function() {
      return this.recordsValues().length;
    };

    Model.deleteAll = function() {
      var key, value, _ref, _results;
      _ref = this.records;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(delete this.records[key]);
      }
      return _results;
    };

    Model.destroyAll = function() {
      var key, value, _ref, _results;
      _ref = this.records;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(this.records[key].destroy());
      }
      return _results;
    };

    Model.update = function(id, atts, options) {
      return this.find(id).updateAttributes(atts, options);
    };

    Model.create = function(atts, options) {
      var record;
      record = new this(atts);
      return record.save(options);
    };

    Model.destroy = function(id, options) {
      return this.find(id).destroy(options);
    };

    Model.change = function(callbackOrParams) {
      if (typeof callbackOrParams === 'function') {
        return this.bind('change', callbackOrParams);
      } else {
        return this.trigger('change', callbackOrParams);
      }
    };

    Model.fetch = function(callbackOrParams) {
      if (typeof callbackOrParams === 'function') {
        return this.bind('fetch', callbackOrParams);
      } else {
        return this.trigger('fetch', callbackOrParams);
      }
    };

    Model.toJSON = function() {
      return this.recordsValues();
    };

    Model.fromJSON = function(objects) {
      var value, _i, _len, _results;
      if (!objects) {
        return;
      }
      if (typeof objects === 'string') {
        objects = JSON.parse(objects);
      }
      if (isArray(objects)) {
        _results = [];
        for (_i = 0, _len = objects.length; _i < _len; _i++) {
          value = objects[_i];
          _results.push(new this(value));
        }
        return _results;
      } else {
        return new this(objects);
      }
    };

    Model.fromForm = function() {
      var _ref;
      return (_ref = new this).fromForm.apply(_ref, arguments);
    };

    Model.recordsValues = function() {
      var key, result, value, _ref;
      result = [];
      _ref = this.records;
      for (key in _ref) {
        value = _ref[key];
        result.push(value);
      }
      return result;
    };

    Model.cloneArray = function(array) {
      var value, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        value = array[_i];
        _results.push(value.clone());
      }
      return _results;
    };

    Model.idCounter = 0;

    Model.uid = function(prefix) {
      var uid;
      if (prefix == null) {
        prefix = '';
      }
      uid = prefix + this.idCounter++;
      if (this.exists(uid)) {
        uid = this.uid(prefix);
      }
      return uid;
    };

    function Model(atts) {
      Model.__super__.constructor.apply(this, arguments);
      if (atts) {
        this.load(atts);
      }
      this.cid = this.constructor.uid('c-');
    }

    Model.prototype.isNew = function() {
      return !this.exists();
    };

    Model.prototype.isValid = function() {
      return !this.validate();
    };

    Model.prototype.validate = function() {};

    Model.prototype.load = function(atts) {
      var key, value;
      for (key in atts) {
        value = atts[key];
        if (typeof this[key] === 'function') {
          this[key](value);
        } else {
          this[key] = value;
        }
      }
      return this;
    };

    Model.prototype.attributes = function() {
      var key, result, _i, _len, _ref;
      result = {};
      _ref = this.constructor.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        if (key in this) {
          if (typeof this[key] === 'function') {
            result[key] = this[key]();
          } else {
            result[key] = this[key];
          }
        }
      }
      if (this.id) {
        result.id = this.id;
      }
      return result;
    };

    Model.prototype.eql = function(rec) {
      return !!(rec && rec.constructor === this.constructor && (rec.cid === this.cid) || (rec.id && rec.id === this.id));
    };

    Model.prototype.save = function(options) {
      var error, record;
      if (options == null) {
        options = {};
      }
      if (options.validate !== false) {
        error = this.validate();
        if (error) {
          this.trigger('error', error);
          return false;
        }
      }
      this.trigger('beforeSave', options);
      record = this.isNew() ? this.create(options) : this.update(options);
      this.trigger('save', options);
      return record;
    };

    Model.prototype.updateAttribute = function(name, value, options) {
      this[name] = value;
      return this.save(options);
    };

    Model.prototype.updateAttributes = function(atts, options) {
      this.load(atts);
      return this.save(options);
    };

    Model.prototype.changeID = function(id) {
      var records;
      records = this.constructor.records;
      records[id] = records[this.id];
      delete records[this.id];
      this.id = id;
      return this.save();
    };

    Model.prototype.destroy = function(options) {
      if (options == null) {
        options = {};
      }
      this.trigger('beforeDestroy', options);
      delete this.constructor.records[this.id];
      delete this.constructor.crecords[this.cid];
      this.destroyed = true;
      this.trigger('destroy', options);
      this.trigger('change', 'destroy', options);
      this.unbind();
      return this;
    };

    Model.prototype.dup = function(newRecord) {
      var result;
      result = new this.constructor(this.attributes());
      if (newRecord === false) {
        result.cid = this.cid;
      } else {
        delete result.id;
      }
      return result;
    };

    Model.prototype.clone = function() {
      return createObject(this);
    };

    Model.prototype.reload = function() {
      var original;
      if (this.isNew()) {
        return this;
      }
      original = this.constructor.find(this.id);
      this.load(original.attributes());
      return original;
    };

    Model.prototype.toJSON = function() {
      return this.attributes();
    };

    Model.prototype.toString = function() {
      return "<" + this.constructor.className + " (" + (JSON.stringify(this)) + ")>";
    };

    Model.prototype.fromForm = function(form) {
      var key, result, _i, _len, _ref;
      result = {};
      _ref = $(form).serializeArray();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        result[key.name] = key.value;
      }
      return this.load(result);
    };

    Model.prototype.exists = function() {
      return this.id && this.id in this.constructor.records;
    };

    Model.prototype.update = function(options) {
      var clone, records;
      this.trigger('beforeUpdate', options);
      records = this.constructor.records;
      records[this.id].load(this.attributes());
      clone = records[this.id].clone();
      clone.trigger('update', options);
      clone.trigger('change', 'update', options);
      return clone;
    };

    Model.prototype.create = function(options) {
      var clone, record;
      this.trigger('beforeCreate', options);
      if (!this.id) {
        this.id = this.cid;
      }
      record = this.dup(false);
      this.constructor.records[this.id] = record;
      this.constructor.crecords[this.cid] = record;
      clone = record.clone();
      clone.trigger('create', options);
      clone.trigger('change', 'create', options);
      return clone;
    };

    Model.prototype.bind = function(events, callback) {
      var binder, unbinder,
        _this = this;
      this.constructor.bind(events, binder = function(record) {
        if (record && _this.eql(record)) {
          return callback.apply(_this, arguments);
        }
      });
      this.constructor.bind('unbind', unbinder = function(record) {
        if (record && _this.eql(record)) {
          _this.constructor.unbind(events, binder);
          return _this.constructor.unbind('unbind', unbinder);
        }
      });
      return binder;
    };

    Model.prototype.one = function(events, callback) {
      var binder,
        _this = this;
      return binder = this.bind(events, function() {
        _this.constructor.unbind(events, binder);
        return callback.apply(_this, arguments);
      });
    };

    Model.prototype.trigger = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      args.splice(1, 0, this);
      return (_ref = this.constructor).trigger.apply(_ref, args);
    };

    Model.prototype.unbind = function() {
      return this.trigger('unbind');
    };

    return Model;

  })(Module);

  Controller = (function(_super) {

    __extends(Controller, _super);

    Controller.name = 'Controller';

    Controller.include(Events);

    Controller.include(Log);

    Controller.prototype.eventSplitter = /^(\S+)\s*(.*)$/;

    Controller.prototype.tag = 'div';

    function Controller(options) {
      this.release = __bind(this.release, this);

      var key, value, _ref;
      this.options = options;
      _ref = this.options;
      for (key in _ref) {
        value = _ref[key];
        this[key] = value;
      }
      if (!this.el) {
        this.el = document.createElement(this.tag);
      }
      this.el = $(this.el);
      this.$el = this.el;
      if (this.className) {
        this.el.addClass(this.className);
      }
      if (this.attributes) {
        this.el.attr(this.attributes);
      }
      if (!this.events) {
        this.events = this.constructor.events;
      }
      if (!this.elements) {
        this.elements = this.constructor.elements;
      }
      if (this.events) {
        this.delegateEvents(this.events);
      }
      if (this.elements) {
        this.refreshElements();
      }
      Controller.__super__.constructor.apply(this, arguments);
    }

    Controller.prototype.release = function() {
      this.trigger('release');
      this.el.remove();
      return this.unbind();
    };

    Controller.prototype.$ = function(selector) {
      return $(selector, this.el);
    };

    Controller.prototype.delegateEvents = function(events) {
      var eventName, key, match, method, selector, _results,
        _this = this;
      _results = [];
      for (key in events) {
        method = events[key];
        if (typeof method === 'function') {
          method = (function(method) {
            return function() {
              method.apply(_this, arguments);
              return true;
            };
          })(method);
        } else {
          if (!this[method]) {
            throw new Error("" + method + " doesn't exist");
          }
          method = (function(method) {
            return function() {
              _this[method].apply(_this, arguments);
              return true;
            };
          })(method);
        }
        match = key.match(this.eventSplitter);
        eventName = match[1];
        selector = match[2];
        if (selector === '') {
          _results.push(this.el.bind(eventName, method));
        } else {
          _results.push(this.el.delegate(selector, eventName, method));
        }
      }
      return _results;
    };

    Controller.prototype.refreshElements = function() {
      var key, value, _ref, _results;
      _ref = this.elements;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(this[value] = this.$(key));
      }
      return _results;
    };

    Controller.prototype.delay = function(func, timeout) {
      return setTimeout(this.proxy(func), timeout || 0);
    };

    Controller.prototype.html = function(element) {
      this.el.html(element.el || element);
      this.refreshElements();
      return this.el;
    };

    Controller.prototype.append = function() {
      var e, elements, _ref;
      elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      elements = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          e = elements[_i];
          _results.push(e.el || e);
        }
        return _results;
      })();
      (_ref = this.el).append.apply(_ref, elements);
      this.refreshElements();
      return this.el;
    };

    Controller.prototype.appendTo = function(element) {
      this.el.appendTo(element.el || element);
      this.refreshElements();
      return this.el;
    };

    Controller.prototype.prepend = function() {
      var e, elements, _ref;
      elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      elements = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          e = elements[_i];
          _results.push(e.el || e);
        }
        return _results;
      })();
      (_ref = this.el).prepend.apply(_ref, elements);
      this.refreshElements();
      return this.el;
    };

    Controller.prototype.replace = function(element) {
      var previous, _ref;
      _ref = [this.el, $(element.el || element)], previous = _ref[0], this.el = _ref[1];
      previous.replaceWith(this.el);
      this.delegateEvents(this.events);
      this.refreshElements();
      return this.el;
    };

    return Controller;

  })(Module);

  $ = (typeof window !== "undefined" && window !== null ? window.jQuery : void 0) || (typeof window !== "undefined" && window !== null ? window.Zepto : void 0) || function(element) {
    return element;
  };

  createObject = Object.create || function(o) {
    var Func;
    Func = function() {};
    Func.prototype = o;
    return new Func();
  };

  isArray = function(value) {
    return Object.prototype.toString.call(value) === '[object Array]';
  };

  isBlank = function(value) {
    var key;
    if (!value) {
      return true;
    }
    for (key in value) {
      return false;
    }
    return true;
  };

  makeArray = function(args) {
    return Array.prototype.slice.call(args, 0);
  };

  Spine = this.Spine = {};

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Spine;
  }

  Spine.version = '1.0.8';

  Spine.isArray = isArray;

  Spine.isBlank = isBlank;

  Spine.$ = $;

  Spine.Events = Events;

  Spine.Log = Log;

  Spine.Module = Module;

  Spine.Controller = Controller;

  Spine.Model = Model;

  Module.extend.call(Spine, Events);

  Module.create = Module.sub = Controller.create = Controller.sub = Model.sub = function(instances, statics) {
    var Result;
    Result = (function(_super) {

      __extends(Result, _super);

      Result.name = 'Result';

      function Result() {
        return Result.__super__.constructor.apply(this, arguments);
      }

      return Result;

    })(this);
    if (instances) {
      Result.include(instances);
    }
    if (statics) {
      Result.extend(statics);
    }
    if (typeof Result.unbind === "function") {
      Result.unbind();
    }
    return Result;
  };

  Model.setup = function(name, attributes) {
    var Instance;
    if (attributes == null) {
      attributes = [];
    }
    Instance = (function(_super) {

      __extends(Instance, _super);

      Instance.name = 'Instance';

      function Instance() {
        return Instance.__super__.constructor.apply(this, arguments);
      }

      return Instance;

    })(this);
    Instance.configure.apply(Instance, [name].concat(__slice.call(attributes)));
    return Instance;
  };

  Spine.Class = Module;

  CalendarDate = (function(_super) {

    __extends(CalendarDate, _super);

    CalendarDate.name = 'CalendarDate';

    function CalendarDate() {
      return CalendarDate.__super__.constructor.apply(this, arguments);
    }

    CalendarDate.configure('CalendarDate', 'element', 'date', 'active');

    CalendarDate.deactivateAllDates = function() {
      return CalendarDate.each(function(date) {
        return date.updateAttributes({
          active: false
        });
      });
    };

    CalendarDate.prototype.toPath = function() {
      return moment(this.date).format('YYYY/MM/DD');
    };

    return CalendarDate;

  })(Spine.Model);

  window.CalendarDate = CalendarDate;

  CalendarEvent = (function(_super) {

    __extends(CalendarEvent, _super);

    CalendarEvent.name = 'CalendarEvent';

    function CalendarEvent() {
      return CalendarEvent.__super__.constructor.apply(this, arguments);
    }

    CalendarEvent.configure('CalendarEvent', 'held_on', 'active', 'element');

    CalendarEvent.activateAllEventsOn = function(date) {
      var event, _i, _len, _ref, _results;
      _ref = CalendarEvent.findAllByAttribute('held_on', date);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        _results.push(event.updateAttributes({
          active: true
        }));
      }
      return _results;
    };

    CalendarEvent.deactivateAllEvents = function() {
      return CalendarEvent.each(function(event) {
        return event.updateAttributes({
          active: false
        });
      });
    };

    return CalendarEvent;

  })(Spine.Model);

  window.CalendarEvent = CalendarEvent;

  CalendarDatesController = (function(_super) {

    __extends(CalendarDatesController, _super);

    CalendarDatesController.name = 'CalendarDatesController';

    function CalendarDatesController(element) {
      this.element = element;
      this.initializeDates();
    }

    CalendarDatesController.prototype.initializeDates = function() {
      var date, el, _i, _len, _ref, _results;
      _ref = this.element.find('.date');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        date = CalendarDate.create({
          element: $(el),
          date: $(el).data('date'),
          active: false
        });
        _results.push(this.initializeEventSelect(date));
      }
      return _results;
    };

    CalendarDatesController.prototype.initializeEventSelect = function(date) {
      date.element.bind('click', function() {
        date.trigger('activate');
        CalendarDate.deactivateAllDates();
        return date.updateAttributes({
          active: true
        });
      });
      date.bind('activate', function(date) {
        CalendarEvent.deactivateAllEvents();
        return CalendarEvent.activateAllEventsOn(date.date);
      });
      return date.bind('change', function(date) {
        if (date.active === true) {
          date.element.addClass('selected');
        }
        if (date.active === false) {
          return date.element.removeClass('selected');
        }
      });
    };

    return CalendarDatesController;

  })(Spine.Module);

  window.CalendarDatesController = CalendarDatesController;

  CalendarEventsController = (function(_super) {

    __extends(CalendarEventsController, _super);

    CalendarEventsController.name = 'CalendarEventsController';

    function CalendarEventsController(element) {
      var el, event, _i, _len, _ref;
      _ref = element.find('.event_detail');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        event = CalendarEvent.create({
          element: $(el).hide(),
          held_on: $(el).data('event-date'),
          active: false
        });
        this.initializeEventSelect(event);
      }
    }

    CalendarEventsController.prototype.initializeEventSelect = function(event) {
      return event.bind('change', function() {
        if (event.active === true) {
          event.element.show();
        }
        if (event.active === false) {
          return event.element.hide();
        }
      });
    };

    return CalendarEventsController;

  })(Spine.Module);

  window.CalendarEventsController = CalendarEventsController;

  CalendarApplication = (function() {
    var calendarElements;

    CalendarApplication.name = 'CalendarApplication';

    function CalendarApplication() {}

    calendarElements = {
      'ul.dates': CalendarDatesController,
      'ul.event_details': CalendarEventsController
    };

    CalendarApplication.initialize = function() {
      var controller, el, element, _results;
      _results = [];
      for (element in calendarElements) {
        controller = calendarElements[element];
        _results.push((function() {
          var _i, _len, _ref, _results1;
          _ref = $(element);
          _results1 = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            el = _ref[_i];
            _results1.push(new controller($(el)));
          }
          return _results1;
        })());
      }
      return _results;
    };

    return CalendarApplication;

  })();

  window.CalendarApplication = CalendarApplication;

}).call(this);
(function(e){function O(e,t,n,r){var i=n.lang();return i[e].call?i[e](n,r):i[e][t]}function M(e,t){return function(n){return B(e.call(this,n),t)}}function _(e){return function(t){var n=e.call(this,t);return n+this.lang().ordinal(n)}}function D(e,t,n){this._d=e;this._isUTC=!!t;this._a=e._a||null;this._lang=n||false}function P(e){var t=this._data={},n=e.years||e.y||0,r=e.months||e.M||0,i=e.weeks||e.w||0,s=e.days||e.d||0,o=e.hours||e.h||0,u=e.minutes||e.m||0,a=e.seconds||e.s||0,f=e.milliseconds||e.ms||0;this._milliseconds=f+a*1e3+u*6e4+o*36e5;this._days=s+i*7;this._months=r+n*12;t.milliseconds=f%1e3;a+=H(f/1e3);t.seconds=a%60;u+=H(a/60);t.minutes=u%60;o+=H(u/60);t.hours=o%24;s+=H(o/24);s+=i*7;t.days=s%30;r+=H(s/30);t.months=r%12;n+=H(r/12);t.years=n;this._lang=false}function H(e){if(e<0){return Math.ceil(e)}else{return Math.floor(e)}}function B(e,t){var n=e+"";while(n.length<t){n="0"+n}return n}function j(e,t,n){var r=t._milliseconds,i=t._days,s=t._months,o;if(r){e._d.setTime(+e+r*n)}if(i){e.date(e.date()+i*n)}if(s){o=e.date();e.date(1).month(e.month()+s*n).date(Math.min(o,e.daysInMonth()))}}function F(e){return Object.prototype.toString.call(e)==="[object Array]"}function I(e,t){var n=Math.min(e.length,t.length),r=Math.abs(e.length-t.length),i=0,s;for(s=0;s<n;s++){if(~~e[s]!==~~t[s]){i++}}return i+r}function q(e,t,n,r){var i,s,o=[];for(i=0;i<7;i++){o[i]=e[i]=e[i]==null?i===2?1:0:e[i]}e[7]=o[7]=t;if(e[8]!=null){o[8]=e[8]}e[3]+=n||0;e[4]+=r||0;s=new Date(0);if(t){s.setUTCFullYear(e[0],e[1],e[2]);s.setUTCHours(e[3],e[4],e[5],e[6])}else{s.setFullYear(e[0],e[1],e[2]);s.setHours(e[3],e[4],e[5],e[6])}s._a=o;return s}function R(e,n){var r,i,o=[];if(!n&&u){n=require("./lang/"+e)}for(r=0;r<a.length;r++){n[a[r]]=n[a[r]]||s.en[a[r]]}for(r=0;r<12;r++){i=t([2e3,r]);o[r]=new RegExp("^"+(n.months[r]||n.months(i,""))+"|^"+(n.monthsShort[r]||n.monthsShort(i,"")).replace(".",""),"i")}n.monthsParse=n.monthsParse||o;s[e]=n;return n}function U(e){var n=typeof e==="string"&&e||e&&e._lang||null;return n?s[n]||R(n):t}function z(e){if(e.match(/\[.*\]/)){return e.replace(/^\[|\]$/g,"")}return e.replace(/\\/g,"")}function W(e){var t=e.match(l),n,r;for(n=0,r=t.length;n<r;n++){if(A[t[n]]){t[n]=A[t[n]]}else{t[n]=z(t[n])}}return function(i){var s="";for(n=0;n<r;n++){s+=typeof t[n].call==="function"?t[n].call(i,e):t[n]}return s}}function X(e,t){function r(t){return e.lang().longDateFormat[t]||t}var n=5;while(n--&&c.test(t)){t=t.replace(c,r)}if(!C[t]){C[t]=W(t)}return C[t](e)}function V(e){switch(e){case"DDDD":return v;case"YYYY":return m;case"S":case"SS":case"SSS":case"DDD":return d;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":case"a":case"A":return g;case"Z":case"ZZ":return y;case"T":return b;case"MM":case"DD":case"YY":case"HH":case"hh":case"mm":case"ss":case"M":case"D":case"d":case"H":case"h":case"m":case"s":return p;default:return new RegExp(e.replace("\\",""))}}function $(e,t,n,r){var i,s;switch(e){case"M":case"MM":n[1]=t==null?0:~~t-1;break;case"MMM":case"MMMM":for(i=0;i<12;i++){if(U().monthsParse[i].test(t)){n[1]=i;s=true;break}}if(!s){n[8]=false}break;case"D":case"DD":case"DDD":case"DDDD":if(t!=null){n[2]=~~t}break;case"YY":n[0]=~~t+(~~t>70?1900:2e3);break;case"YYYY":n[0]=~~Math.abs(t);break;case"a":case"A":r.isPm=(t+"").toLowerCase()==="pm";break;case"H":case"HH":case"h":case"hh":n[3]=~~t;break;case"m":case"mm":n[4]=~~t;break;case"s":case"ss":n[5]=~~t;break;case"S":case"SS":case"SSS":n[6]=~~(("0."+t)*1e3);break;case"Z":case"ZZ":r.isUTC=true;i=(t+"").match(x);if(i&&i[1]){r.tzh=~~i[1]}if(i&&i[2]){r.tzm=~~i[2]}if(i&&i[0]==="+"){r.tzh=-r.tzh;r.tzm=-r.tzm}break}if(t==null){n[8]=false}}function J(e,t){var n=[0,0,1,0,0,0,0],r={tzh:0,tzm:0},i=t.match(l),s,o;for(s=0;s<i.length;s++){o=(V(i[s]).exec(e)||[])[0];if(o){e=e.slice(e.indexOf(o)+o.length)}if(A[i[s]]){$(i[s],o,n,r)}}if(r.isPm&&n[3]<12){n[3]+=12}if(r.isPm===false&&n[3]===12){n[3]=0}return q(n,r.isUTC,r.tzh,r.tzm)}function K(e,t){var n,r=e.match(h)||[],i,s=99,o,u,a;for(o=0;o<t.length;o++){u=J(e,t[o]);i=X(new D(u),t[o]).match(h)||[];a=I(r,i);if(a<s){s=a;n=u}}return n}function Q(e){var t="YYYY-MM-DDT",n;if(w.exec(e)){for(n=0;n<4;n++){if(S[n][1].exec(e)){t+=S[n][0];break}}return y.exec(e)?J(e,t+" Z"):J(e,t)}return new Date(e)}function G(e,t,n,r,i){var s=i.relativeTime[e];return typeof s==="function"?s(t||1,!!n,e,r):s.replace(/%d/i,t||1)}function Y(e,t,n){var i=r(Math.abs(e)/1e3),s=r(i/60),o=r(s/60),u=r(o/24),a=r(u/365),f=i<45&&["s",i]||s===1&&["m"]||s<45&&["mm",s]||o===1&&["h"]||o<22&&["hh",o]||u===1&&["d"]||u<=25&&["dd",u]||u<=45&&["M"]||u<345&&["MM",r(u/30)]||a===1&&["y"]||["yy",a];f[2]=t;f[3]=e>0;f[4]=n;return G.apply({},f)}function Z(e,n){t.fn[e]=function(e){var t=this._isUTC?"UTC":"";if(e!=null){this._d["set"+t+n](e);return this}else{return this._d["get"+t+n]()}}}function et(e){t.duration.fn[e]=function(){return this._data[e]}}function tt(e,n){t.duration.fn["as"+e]=function(){return+this/n}}var t,n="1.7.2",r=Math.round,i,s={},o="en",u=typeof module!=="undefined"&&module.exports,a="months|monthsShort|weekdays|weekdaysShort|weekdaysMin|longDateFormat|calendar|relativeTime|ordinal|meridiem".split("|"),f=/^\/?Date\((\-?\d+)/i,l=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|SS?S?|zz?|ZZ?|.)/g,c=/(\[[^\[]*\])|(\\)?(LT|LL?L?L?)/g,h=/([0-9a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+)/gi,p=/\d\d?/,d=/\d{1,3}/,v=/\d{3}/,m=/\d{1,4}/,g=/[0-9a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+/i,y=/Z|[\+\-]\d\d:?\d\d/i,b=/T/i,w=/^\s*\d{4}-\d\d-\d\d(T(\d\d(:\d\d(:\d\d(\.\d\d?\d?)?)?)?)?([\+\-]\d\d:?\d\d)?)?/,E="YYYY-MM-DDTHH:mm:ssZ",S=[["HH:mm:ss.S",/T\d\d:\d\d:\d\d\.\d{1,3}/],["HH:mm:ss",/T\d\d:\d\d:\d\d/],["HH:mm",/T\d\d:\d\d/],["HH",/T\d\d/]],x=/([\+\-]|\d\d)/gi,T="Month|Date|Hours|Minutes|Seconds|Milliseconds".split("|"),N={Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6},C={},k="DDD w M D d".split(" "),L="M D H h m s w".split(" "),A={M:function(){return this.month()+1},MMM:function(e){return O("monthsShort",this.month(),this,e)},MMMM:function(e){return O("months",this.month(),this,e)},D:function(){return this.date()},DDD:function(){var e=new Date(this.year(),this.month(),this.date()),t=new Date(this.year(),0,1);return~~((e-t)/864e5+1.5)},d:function(){return this.day()},dd:function(e){return O("weekdaysMin",this.day(),this,e)},ddd:function(e){return O("weekdaysShort",this.day(),this,e)},dddd:function(e){return O("weekdays",this.day(),this,e)},w:function(){var e=new Date(this.year(),this.month(),this.date()-this.day()+5),t=new Date(e.getFullYear(),0,4);return~~((e-t)/864e5/7+1.5)},YY:function(){return B(this.year()%100,2)},YYYY:function(){return B(this.year(),4)},a:function(){return this.lang().meridiem(this.hours(),this.minutes(),true)},A:function(){return this.lang().meridiem(this.hours(),this.minutes(),false)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return~~(this.milliseconds()/100)},SS:function(){return B(~~(this.milliseconds()/10),2)},SSS:function(){return B(this.milliseconds(),3)},Z:function(){var e=-this.zone(),t="+";if(e<0){e=-e;t="-"}return t+B(~~(e/60),2)+":"+B(~~e%60,2)},ZZ:function(){var e=-this.zone(),t="+";if(e<0){e=-e;t="-"}return t+B(~~(10*e/6),4)}};while(k.length){i=k.pop();A[i+"o"]=_(A[i])}while(L.length){i=L.pop();A[i+i]=M(A[i],2)}A.DDDD=M(A.DDD,3);t=function(n,r){if(n===null||n===""){return null}var i,s;if(t.isMoment(n)){return new D(new Date(+n._d),n._isUTC,n._lang)}else if(r){if(F(r)){i=K(n,r)}else{i=J(n,r)}}else{s=f.exec(n);i=n===e?new Date:s?new Date(+s[1]):n instanceof Date?n:F(n)?q(n):typeof n==="string"?Q(n):new Date(n)}return new D(i)};t.utc=function(e,n){if(F(e)){return new D(q(e,true),true)}if(typeof e==="string"&&!y.exec(e)){e+=" +0000";if(n){n+=" Z"}}return t(e,n).utc()};t.unix=function(e){return t(e*1e3)};t.duration=function(e,n){var r=t.isDuration(e),i=typeof e==="number",s=r?e._data:i?{}:e,o;if(i){if(n){s[n]=e}else{s.milliseconds=e}}o=new P(s);if(r){o._lang=e._lang}return o};t.humanizeDuration=function(e,n,r){return t.duration(e,n===true?null:n).humanize(n===true?true:r)};t.version=n;t.defaultFormat=E;t.lang=function(e,n){var r;if(!e){return o}if(n||!s[e]){R(e,n)}if(s[e]){for(r=0;r<a.length;r++){t[a[r]]=s[e][a[r]]}t.monthsParse=s[e].monthsParse;o=e}};t.langData=U;t.isMoment=function(e){return e instanceof D};t.isDuration=function(e){return e instanceof P};t.lang("en",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D YYYY",LLL:"MMMM D YYYY LT",LLLL:"dddd, MMMM D YYYY LT"},meridiem:function(e,t,n){if(e>11){return n?"pm":"PM"}else{return n?"am":"AM"}},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinal:function(e){var t=e%10;return~~(e%100/10)===1?"th":t===1?"st":t===2?"nd":t===3?"rd":"th"}});t.fn=D.prototype={clone:function(){return t(this)},valueOf:function(){return+this._d},unix:function(){return Math.floor(+this._d/1e3)},toString:function(){return this._d.toString()},toDate:function(){return this._d},toArray:function(){var e=this;return[e.year(),e.month(),e.date(),e.hours(),e.minutes(),e.seconds(),e.milliseconds(),!!this._isUTC]},isValid:function(){if(this._a){if(this._a[8]!=null){return!!this._a[8]}return!I(this._a,(this._a[7]?t.utc(this._a):t(this._a)).toArray())}return!isNaN(this._d.getTime())},utc:function(){this._isUTC=true;return this},local:function(){this._isUTC=false;return this},format:function(e){return X(this,e?e:t.defaultFormat)},add:function(e,n){var r=n?t.duration(+n,e):t.duration(e);j(this,r,1);return this},subtract:function(e,n){var r=n?t.duration(+n,e):t.duration(e);j(this,r,-1);return this},diff:function(e,n,i){var s=this._isUTC?t(e).utc():t(e).local(),o=(this.zone()-s.zone())*6e4,u=this._d-s._d-o,a=this.year()-s.year(),f=this.month()-s.month(),l=this.date()-s.date(),c;if(n==="months"){c=a*12+f+l/30}else if(n==="years"){c=a+(f+l/30)/12}else{c=n==="seconds"?u/1e3:n==="minutes"?u/6e4:n==="hours"?u/36e5:n==="days"?u/864e5:n==="weeks"?u/6048e5:u}return i?c:r(c)},from:function(e,n){return t.duration(this.diff(e)).lang(this._lang).humanize(!n)},fromNow:function(e){return this.from(t(),e)},calendar:function(){var e=this.diff(t().sod(),"days",true),n=this.lang().calendar,r=n.sameElse,i=e<-6?r:e<-1?n.lastWeek:e<0?n.lastDay:e<1?n.sameDay:e<2?n.nextDay:e<7?n.nextWeek:r;return this.format(typeof i==="function"?i.apply(this):i)},isLeapYear:function(){var e=this.year();return e%4===0&&e%100!==0||e%400===0},isDST:function(){return this.zone()<t([this.year()]).zone()||this.zone()<t([this.year(),5]).zone()},day:function(e){var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return e==null?t:this.add({d:e-t})},startOf:function(e){switch(e.replace(/s$/,"")){case"year":this.month(0);case"month":this.date(1);case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return this},endOf:function(e){return this.startOf(e).add(e.replace(/s?$/,"s"),1).subtract("ms",1)},sod:function(){return this.clone().startOf("day")},eod:function(){return this.clone().endOf("day")},zone:function(){return this._isUTC?0:this._d.getTimezoneOffset()},daysInMonth:function(){return t.utc([this.year(),this.month()+1,0]).date()},lang:function(t){if(t===e){return U(this)}else{this._lang=t;return this}}};for(i=0;i<T.length;i++){Z(T[i].toLowerCase(),T[i])}Z("year","FullYear");t.duration.fn=P.prototype={weeks:function(){return H(this.days()/7)},valueOf:function(){return this._milliseconds+this._days*864e5+this._months*2592e6},humanize:function(e){var t=+this,n=this.lang().relativeTime,r=Y(t,!e,this.lang()),i=t<=0?n.past:n.future;if(e){if(typeof i==="function"){r=i(r)}else{r=i.replace(/%s/i,r)}}return r},lang:t.fn.lang};for(i in N){if(N.hasOwnProperty(i)){tt(i,N[i]);et(i.toLowerCase())}}tt("Weeks",6048e5);if(u){module.exports=t}if(typeof ender==="undefined"){this["moment"]=t}if(typeof define==="function"&&define.amd){define("moment",[],function(){return t})}}).call(this)
