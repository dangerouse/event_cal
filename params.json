{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Event Calendar","body":"# EventCalendar #\r\n\r\nEventCalendar is a calendar with events on it.\r\n\r\n<img src='https://raw.github.com/shin1ohno/event_cal/gh-pages/images/sp_sample.png' width = '35%' height= 'auto'>\r\n\r\nYou can easily\r\n\r\n- create and display many kinds of events\r\n- customize how events displayed\r\n- integrate events with existing model\r\n\r\n## Use EventCalendar ##\r\n\r\n```ruby\r\ngem 'event_calendar', github: 'shin1ohno/event_calendar'\r\n```\r\n\r\n1. create calendar instance in controller and call ```render_monthly(@calendar)``` in view. simple sample code is below. ***only with this step, you basically can get calendar view***\r\n2. create event model that extends ::EventCalendar::Events\r\n3. create partial for each event. with sptep 2 and 3 it's automatically shown in calendar view\r\n\r\n```sample/app_***``` directory contains sample rails application that shows how you do. This sample runs as normal rails application.\r\n\r\n```ruby\r\nclass MyCalendarController < ApplicationController\r\n  def index\r\n    @calendar = ::EventCalendar::Calendar.new(Date.today)\r\n  end\r\n\r\n  def show\r\n    date = Date.parse(\"#{params[:year]}-#{params[:month]}-#{params[:date]}\")\r\n    @calendar = ::EventCalendar::Calendar.new(date)\r\n  end\r\nend\r\n```\r\n\r\n```haml\r\n.calendar_view\r\n  = render_monthly(@calendar)\r\n  = render_event_details(@calendar.events) # if you need event details view\r\n```\r\n\r\n```ruby\r\n# typically, you may want to draw routes like this\r\nApp3211::Application.routes.draw do\r\n  resources :my_calendar do\r\n    collection do\r\n      get ':year/:month/:date' => 'my_calendar#show', :constraints => { :year => /\\d{4}/, :month => /\\d{1,2}/, :day => /\\d{1,2}/ }\r\n    end\r\n  end\r\nend\r\n```\r\nyou can use default style for 7days * 4~5 weeks calendar\r\n\r\n```css\r\n/*\r\n in application.css... add sprockets manifest like\r\n *= require_self\r\n *= require event_calendar\r\n *= require_tree .\r\n */\r\n```\r\n\r\nyou can use basic event detail selector implemented in JavaScript with [Spine.js](http://spinejs.com)\r\n\r\n```javascript\r\n// in application.js... add sprockets manifest like\r\n//= require jquery\r\n//= require jquery_ujs\r\n//= require event_calendar\r\n//= require_tree .\r\n// and then initialize like this...\r\n\r\njQuery(function($) {\r\n  var baseDatelement;\r\n  CalendarApplication.initialize();\r\n  baseDatelement = CalendarDate.findByAttribute('date', $('.calendar').data('base-date')).element;\r\n  if (baseDatelement.hasClass('has_events')) {\r\n    return baseDatelement.click();\r\n  }\r\n});\r\n```\r\n\r\n## Develop EventCalendar ##\r\n\r\n### running tests ###\r\n\r\n- Ruby code is tested by rspec\r\n- JavaScript code is tested by jasmine\r\n- For auto testing, I use [tork](https://github.com/sunaku/tork) for ruby code and [Guard support for jasmine-headless-webkit](https://github.com/johnbintz/guard-jasmine-headless-webkit) for JavaScript code\r\n\r\n```bundle``` first. ```bundle exec tork``` then hit a to run all rspec examples. ```bundle exec guard``` then hit return to run all jasmine expamples\r\n\r\n## Thanks ##\r\n\r\n- [Takada Satoshi](https://github.com/satoship) for giving many great ideas for implementation\r\n- [Takuji Ikeda](https://github.com/tikeda) for giving sweet design\r\n\r\n## License ##\r\n\r\nThis project uses MIT-LICENSE.\r\n","tagline":"Calendar that easy to use, easy to customise"}